{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JsonRpcEngine = void 0;\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\nclass JsonRpcEngine extends safe_event_emitter_1.default {\n  constructor() {\n    super();\n    this._middleware = [];\n  }\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n  push(middleware) {\n    this._middleware.push(middleware);\n  }\n  handle(req, cb) {\n    if (cb && typeof cb !== 'function') {\n      throw new Error('\"callback\" must be a function if provided.');\n    }\n    if (Array.isArray(req)) {\n      if (cb) {\n        return this._handleBatch(req, cb);\n      }\n      return this._handleBatch(req);\n    }\n    if (cb) {\n      return this._handle(req, cb);\n    }\n    return this._promiseHandle(req);\n  }\n  /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */\n  asMiddleware() {\n    return async (req, res, next, end) => {\n      try {\n        const [middlewareError, isComplete, returnHandlers] = await JsonRpcEngine._runAllMiddleware(req, res, this._middleware);\n        if (isComplete) {\n          await JsonRpcEngine._runReturnHandlers(returnHandlers);\n          return end(middlewareError);\n        }\n        return next(async handlerCallback => {\n          try {\n            await JsonRpcEngine._runReturnHandlers(returnHandlers);\n          } catch (error) {\n            return handlerCallback(error);\n          }\n          return handlerCallback();\n        });\n      } catch (error) {\n        return end(error);\n      }\n    };\n  }\n  async _handleBatch(reqs, cb) {\n    // The order here is important\n    try {\n      // 2. Wait for all requests to finish, or throw on some kind of fatal\n      // error\n      const responses = await Promise.all(\n      // 1. Begin executing each request in the order received\n      reqs.map(this._promiseHandle.bind(this)));\n      // 3. Return batch response\n      if (cb) {\n        return cb(null, responses);\n      }\n      return responses;\n    } catch (error) {\n      if (cb) {\n        return cb(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * A promise-wrapped _handle.\n   */\n  _promiseHandle(req) {\n    return new Promise(resolve => {\n      this._handle(req, (_err, res) => {\n        // There will always be a response, and it will always have any error\n        // that is caught and propagated.\n        resolve(res);\n      });\n    });\n  }\n  /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */\n  async _handle(callerReq, cb) {\n    if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== 'object') {\n      const error = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, `Requests must be plain objects. Received: ${typeof callerReq}`, {\n        request: callerReq\n      });\n      return cb(error, {\n        id: undefined,\n        jsonrpc: '2.0',\n        error\n      });\n    }\n    if (typeof callerReq.method !== 'string') {\n      const error = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, `Must specify a string method. Received: ${typeof callerReq.method}`, {\n        request: callerReq\n      });\n      return cb(error, {\n        id: callerReq.id,\n        jsonrpc: '2.0',\n        error\n      });\n    }\n    const req = Object.assign({}, callerReq);\n    const res = {\n      id: req.id,\n      jsonrpc: req.jsonrpc\n    };\n    let error = null;\n    try {\n      await this._processRequest(req, res);\n    } catch (_error) {\n      // A request handler error, a re-thrown middleware error, or something\n      // unexpected.\n      error = _error;\n    }\n    if (error) {\n      // Ensure no result is present on an errored response\n      delete res.result;\n      if (!res.error) {\n        res.error = eth_rpc_errors_1.serializeError(error);\n      }\n    }\n    return cb(error, res);\n  }\n  /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */\n  async _processRequest(req, res) {\n    const [error, isComplete, returnHandlers] = await JsonRpcEngine._runAllMiddleware(req, res, this._middleware);\n    // Throw if \"end\" was not called, or if the response has neither a result\n    // nor an error.\n    JsonRpcEngine._checkForCompletion(req, res, isComplete);\n    // The return handlers should run even if an error was encountered during\n    // middleware processing.\n    await JsonRpcEngine._runReturnHandlers(returnHandlers);\n    // Now we re-throw the middleware processing error, if any, to catch it\n    // further up the call chain.\n    if (error) {\n      throw error;\n    }\n  }\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n  static async _runAllMiddleware(req, res, middlewareStack) {\n    const returnHandlers = [];\n    let error = null;\n    let isComplete = false;\n    // Go down stack of middleware, call and collect optional returnHandlers\n    for (const middleware of middlewareStack) {\n      [error, isComplete] = await JsonRpcEngine._runMiddleware(req, res, middleware, returnHandlers);\n      if (isComplete) {\n        break;\n      }\n    }\n    return [error, isComplete, returnHandlers.reverse()];\n  }\n  /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware exection,\n   * and a boolean indicating whether the request should end.\n   */\n  static _runMiddleware(req, res, middleware, returnHandlers) {\n    return new Promise(resolve => {\n      const end = err => {\n        const error = err || res.error;\n        if (error) {\n          res.error = eth_rpc_errors_1.serializeError(error);\n        }\n        // True indicates that the request should end\n        resolve([error, true]);\n      };\n      const next = returnHandler => {\n        if (res.error) {\n          end(res.error);\n        } else {\n          if (returnHandler) {\n            if (typeof returnHandler !== 'function') {\n              end(new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: \"next\" return handlers must be functions. ` + `Received \"${typeof returnHandler}\" for request:\\n${jsonify(req)}`, {\n                request: req\n              }));\n            }\n            returnHandlers.push(returnHandler);\n          }\n          // False indicates that the request should not end\n          resolve([null, false]);\n        }\n      };\n      try {\n        middleware(req, res, next, end);\n      } catch (error) {\n        end(error);\n      }\n    });\n  }\n  /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */\n  static async _runReturnHandlers(handlers) {\n    for (const handler of handlers) {\n      await new Promise((resolve, reject) => {\n        handler(err => err ? reject(err) : resolve());\n      });\n    }\n  }\n  /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */\n  static _checkForCompletion(req, res, isComplete) {\n    if (!('result' in res) && !('error' in res)) {\n      throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: Response has no error or result for request:\\n${jsonify(req)}`, {\n        request: req\n      });\n    }\n    if (!isComplete) {\n      throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: Nothing ended request:\\n${jsonify(req)}`, {\n        request: req\n      });\n    }\n  }\n}\nexports.JsonRpcEngine = JsonRpcEngine;\nfunction jsonify(request) {\n  return JSON.stringify(request, null, 2);\n}","map":{"version":3,"names":["safe_event_emitter_1","__importDefault","require","eth_rpc_errors_1","JsonRpcEngine","default","constructor","_middleware","push","middleware","handle","req","cb","Error","Array","isArray","_handleBatch","_handle","_promiseHandle","asMiddleware","res","next","end","middlewareError","isComplete","returnHandlers","_runAllMiddleware","_runReturnHandlers","handlerCallback","error","reqs","responses","Promise","all","map","bind","resolve","_err","callerReq","EthereumRpcError","errorCodes","rpc","invalidRequest","request","id","undefined","jsonrpc","method","Object","assign","_processRequest","_error","result","serializeError","_checkForCompletion","middlewareStack","_runMiddleware","reverse","err","returnHandler","internal","jsonify","handlers","handler","reject","exports","JSON","stringify"],"sources":["../src/JsonRpcEngine.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}