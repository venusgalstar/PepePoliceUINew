{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.serializeError = exports.isValidCode = exports.getMessageFromCode = exports.JSON_RPC_SERVER_ERROR_MESSAGE = void 0;\nconst error_constants_1 = require(\"./error-constants\");\nconst classes_1 = require(\"./classes\");\nconst FALLBACK_ERROR_CODE = error_constants_1.errorCodes.rpc.internal;\nconst FALLBACK_MESSAGE = 'Unspecified error message. This is a bug, please report it.';\nconst FALLBACK_ERROR = {\n  code: FALLBACK_ERROR_CODE,\n  message: getMessageFromCode(FALLBACK_ERROR_CODE)\n};\nexports.JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.';\n/**\n * Gets the message for a given code, or a fallback message if the code has\n * no corresponding message.\n */\nfunction getMessageFromCode(code) {\n  let fallbackMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FALLBACK_MESSAGE;\n  if (Number.isInteger(code)) {\n    const codeString = code.toString();\n    if (hasKey(error_constants_1.errorValues, codeString)) {\n      return error_constants_1.errorValues[codeString].message;\n    }\n    if (isJsonRpcServerError(code)) {\n      return exports.JSON_RPC_SERVER_ERROR_MESSAGE;\n    }\n  }\n  return fallbackMessage;\n}\nexports.getMessageFromCode = getMessageFromCode;\n/**\n * Returns whether the given code is valid.\n * A code is only valid if it has a message.\n */\nfunction isValidCode(code) {\n  if (!Number.isInteger(code)) {\n    return false;\n  }\n  const codeString = code.toString();\n  if (error_constants_1.errorValues[codeString]) {\n    return true;\n  }\n  if (isJsonRpcServerError(code)) {\n    return true;\n  }\n  return false;\n}\nexports.isValidCode = isValidCode;\n/**\n * Serializes the given error to an Ethereum JSON RPC-compatible error object.\n * Merely copies the given error's values if it is already compatible.\n * If the given error is not fully compatible, it will be preserved on the\n * returned object's data.originalError property.\n */\nfunction serializeError(error) {\n  let {\n    fallbackError = FALLBACK_ERROR,\n    shouldIncludeStack = false\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _a, _b;\n  if (!fallbackError || !Number.isInteger(fallbackError.code) || typeof fallbackError.message !== 'string') {\n    throw new Error('Must provide fallback error with integer number code and string message.');\n  }\n  if (error instanceof classes_1.EthereumRpcError) {\n    return error.serialize();\n  }\n  const serialized = {};\n  if (error && typeof error === 'object' && !Array.isArray(error) && hasKey(error, 'code') && isValidCode(error.code)) {\n    const _error = error;\n    serialized.code = _error.code;\n    if (_error.message && typeof _error.message === 'string') {\n      serialized.message = _error.message;\n      if (hasKey(_error, 'data')) {\n        serialized.data = _error.data;\n      }\n    } else {\n      serialized.message = getMessageFromCode(serialized.code);\n      serialized.data = {\n        originalError: assignOriginalError(error)\n      };\n    }\n  } else {\n    serialized.code = fallbackError.code;\n    const message = (_a = error) === null || _a === void 0 ? void 0 : _a.message;\n    serialized.message = message && typeof message === 'string' ? message : fallbackError.message;\n    serialized.data = {\n      originalError: assignOriginalError(error)\n    };\n  }\n  const stack = (_b = error) === null || _b === void 0 ? void 0 : _b.stack;\n  if (shouldIncludeStack && error && stack && typeof stack === 'string') {\n    serialized.stack = stack;\n  }\n  return serialized;\n}\nexports.serializeError = serializeError;\n// Internal\nfunction isJsonRpcServerError(code) {\n  return code >= -32099 && code <= -32000;\n}\nfunction assignOriginalError(error) {\n  if (error && typeof error === 'object' && !Array.isArray(error)) {\n    return Object.assign({}, error);\n  }\n  return error;\n}\nfunction hasKey(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}","map":{"version":3,"names":["error_constants_1","require","classes_1","FALLBACK_ERROR_CODE","errorCodes","rpc","internal","FALLBACK_MESSAGE","FALLBACK_ERROR","code","message","getMessageFromCode","exports","JSON_RPC_SERVER_ERROR_MESSAGE","fallbackMessage","arguments","length","undefined","Number","isInteger","codeString","toString","hasKey","errorValues","isJsonRpcServerError","isValidCode","serializeError","error","fallbackError","shouldIncludeStack","Error","EthereumRpcError","serialize","serialized","Array","isArray","_error","data","originalError","assignOriginalError","_a","stack","_b","Object","assign","obj","key","prototype","hasOwnProperty","call"],"sources":["../src/utils.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}