{"ast":null,"code":"const SafeEventEmitter = require('@metamask/safe-event-emitter').default;\nconst createScaffoldMiddleware = require('eth-json-rpc-middleware/scaffold');\nconst {\n  createAsyncMiddleware\n} = require('json-rpc-engine');\nconst createFilterMiddleware = require('./index.js');\nconst {\n  unsafeRandomBytes,\n  incrementHexInt\n} = require('./hexUtils.js');\nconst getBlocksForRange = require('./getBlocksForRange.js');\nmodule.exports = createSubscriptionMiddleware;\nfunction createSubscriptionMiddleware(_ref) {\n  let {\n    blockTracker,\n    provider\n  } = _ref;\n  // state and utilities for handling subscriptions\n  const subscriptions = {};\n  const filterManager = createFilterMiddleware({\n    blockTracker,\n    provider\n  });\n\n  // internal flag\n  let isDestroyed = false;\n\n  // create subscriptionManager api object\n  const events = new SafeEventEmitter();\n  const middleware = createScaffoldMiddleware({\n    eth_subscribe: createAsyncMiddleware(subscribe),\n    eth_unsubscribe: createAsyncMiddleware(unsubscribe)\n  });\n  middleware.destroy = destroy;\n  return {\n    events,\n    middleware\n  };\n  async function subscribe(req, res) {\n    if (isDestroyed) throw new Error('SubscriptionManager - attempting to use after destroying');\n    const subscriptionType = req.params[0];\n    // subId is 16 byte hex string\n    const subId = unsafeRandomBytes(16);\n\n    // create sub\n    let sub;\n    switch (subscriptionType) {\n      case 'newHeads':\n        sub = createSubNewHeads({\n          subId\n        });\n        break;\n      case 'logs':\n        const filterParams = req.params[1];\n        const filter = await filterManager.newLogFilter(filterParams);\n        sub = createSubFromFilter({\n          subId,\n          filter\n        });\n        break;\n      default:\n        throw new Error(`SubscriptionManager - unsupported subscription type \"${subscriptionType}\"`);\n    }\n    subscriptions[subId] = sub;\n    res.result = subId;\n    return;\n    function createSubNewHeads(_ref2) {\n      let {\n        subId\n      } = _ref2;\n      const sub = {\n        type: subscriptionType,\n        destroy: async () => {\n          blockTracker.removeListener('sync', sub.update);\n        },\n        update: async _ref3 => {\n          let {\n            oldBlock,\n            newBlock\n          } = _ref3;\n          // for newHeads\n          const toBlock = newBlock;\n          const fromBlock = incrementHexInt(oldBlock);\n          const rawBlocks = await getBlocksForRange({\n            provider,\n            fromBlock,\n            toBlock\n          });\n          const results = rawBlocks.map(normalizeBlock);\n          results.forEach(value => {\n            _emitSubscriptionResult(subId, value);\n          });\n        }\n      };\n      // check for subscription updates on new block\n      blockTracker.on('sync', sub.update);\n      return sub;\n    }\n    function createSubFromFilter(_ref4) {\n      let {\n        subId,\n        filter\n      } = _ref4;\n      filter.on('update', result => _emitSubscriptionResult(subId, result));\n      const sub = {\n        type: subscriptionType,\n        destroy: async () => {\n          return await filterManager.uninstallFilter(filter.idHex);\n        }\n      };\n      return sub;\n    }\n  }\n  async function unsubscribe(req, res) {\n    if (isDestroyed) throw new Error('SubscriptionManager - attempting to use after destroying');\n    const id = req.params[0];\n    const subscription = subscriptions[id];\n    // if missing, return \"false\" to indicate it was not removed\n    if (!subscription) {\n      res.result = false;\n      return;\n    }\n    // cleanup subscription\n    delete subscriptions[id];\n    await subscription.destroy();\n    res.result = true;\n  }\n  function _emitSubscriptionResult(filterIdHex, value) {\n    events.emit('notification', {\n      jsonrpc: '2.0',\n      method: 'eth_subscription',\n      params: {\n        subscription: filterIdHex,\n        result: value\n      }\n    });\n  }\n  function destroy() {\n    events.removeAllListeners();\n    for (const id in subscriptions) {\n      subscriptions[id].destroy();\n      delete subscriptions[id];\n    }\n    isDestroyed = true;\n  }\n}\nfunction normalizeBlock(block) {\n  return {\n    hash: block.hash,\n    parentHash: block.parentHash,\n    sha3Uncles: block.sha3Uncles,\n    miner: block.miner,\n    stateRoot: block.stateRoot,\n    transactionsRoot: block.transactionsRoot,\n    receiptsRoot: block.receiptsRoot,\n    logsBloom: block.logsBloom,\n    difficulty: block.difficulty,\n    number: block.number,\n    gasLimit: block.gasLimit,\n    gasUsed: block.gasUsed,\n    nonce: block.nonce,\n    mixHash: block.mixHash,\n    timestamp: block.timestamp,\n    extraData: block.extraData\n  };\n}","map":{"version":3,"names":["SafeEventEmitter","require","default","createScaffoldMiddleware","createAsyncMiddleware","createFilterMiddleware","unsafeRandomBytes","incrementHexInt","getBlocksForRange","module","exports","createSubscriptionMiddleware","_ref","blockTracker","provider","subscriptions","filterManager","isDestroyed","events","middleware","eth_subscribe","subscribe","eth_unsubscribe","unsubscribe","destroy","req","res","Error","subscriptionType","params","subId","sub","createSubNewHeads","filterParams","filter","newLogFilter","createSubFromFilter","result","_ref2","type","removeListener","update","_ref3","oldBlock","newBlock","toBlock","fromBlock","rawBlocks","results","map","normalizeBlock","forEach","value","_emitSubscriptionResult","on","_ref4","uninstallFilter","idHex","id","subscription","filterIdHex","emit","jsonrpc","method","removeAllListeners","block","hash","parentHash","sha3Uncles","miner","stateRoot","transactionsRoot","receiptsRoot","logsBloom","difficulty","number","gasLimit","gasUsed","nonce","mixHash","timestamp","extraData"],"sources":["/root/work/PepePoliceUINew/node_modules/eth-json-rpc-filters/subscriptionManager.js"],"sourcesContent":["const SafeEventEmitter = require('@metamask/safe-event-emitter').default\nconst createScaffoldMiddleware = require('eth-json-rpc-middleware/scaffold')\nconst { createAsyncMiddleware } = require('json-rpc-engine')\nconst createFilterMiddleware = require('./index.js')\nconst { unsafeRandomBytes, incrementHexInt } = require('./hexUtils.js')\nconst getBlocksForRange = require('./getBlocksForRange.js')\n\nmodule.exports = createSubscriptionMiddleware\n\n\nfunction createSubscriptionMiddleware({ blockTracker, provider }) {\n  // state and utilities for handling subscriptions\n  const subscriptions = {}\n  const filterManager = createFilterMiddleware({ blockTracker, provider })\n\n  // internal flag\n  let isDestroyed = false\n\n  // create subscriptionManager api object\n  const events = new SafeEventEmitter()\n  const middleware = createScaffoldMiddleware({\n    eth_subscribe: createAsyncMiddleware(subscribe),\n    eth_unsubscribe: createAsyncMiddleware(unsubscribe),\n  })\n  middleware.destroy = destroy\n  return { events, middleware }\n\n  async function subscribe(req, res) {\n\n    if (isDestroyed) throw new Error(\n      'SubscriptionManager - attempting to use after destroying'\n    )\n\n    const subscriptionType = req.params[0]\n    // subId is 16 byte hex string\n    const subId = unsafeRandomBytes(16)\n\n    // create sub\n    let sub\n    switch (subscriptionType) {\n      case 'newHeads':\n        sub = createSubNewHeads({ subId })\n        break\n      case 'logs':\n        const filterParams = req.params[1]\n        const filter = await filterManager.newLogFilter(filterParams)\n        sub = createSubFromFilter({ subId, filter })\n        break\n      default:\n        throw new Error(`SubscriptionManager - unsupported subscription type \"${subscriptionType}\"`)\n\n    }\n    subscriptions[subId] = sub\n\n    res.result = subId\n    return\n\n    function createSubNewHeads({ subId }) {\n      const sub = {\n        type: subscriptionType,\n        destroy: async () => {\n          blockTracker.removeListener('sync', sub.update)\n        },\n        update: async ({ oldBlock, newBlock }) => {\n          // for newHeads\n          const toBlock = newBlock\n          const fromBlock = incrementHexInt(oldBlock)\n          const rawBlocks = await getBlocksForRange({ provider, fromBlock, toBlock })\n          const results = rawBlocks.map(normalizeBlock)\n          results.forEach((value) => {\n            _emitSubscriptionResult(subId, value)\n          })\n        }\n      }\n      // check for subscription updates on new block\n      blockTracker.on('sync', sub.update)\n      return sub\n    }\n\n    function createSubFromFilter({ subId, filter }){\n      filter.on('update', result => _emitSubscriptionResult(subId, result))\n      const sub = {\n        type: subscriptionType,\n        destroy: async () => {\n          return await filterManager.uninstallFilter(filter.idHex)\n        },\n      }\n      return sub\n    }\n  }\n\n  async function unsubscribe(req, res) {\n\n    if (isDestroyed) throw new Error(\n      'SubscriptionManager - attempting to use after destroying'\n    )\n\n    const id = req.params[0]\n    const subscription = subscriptions[id]\n    // if missing, return \"false\" to indicate it was not removed\n    if (!subscription) {\n      res.result = false\n      return\n    }\n    // cleanup subscription\n    delete subscriptions[id]\n    await subscription.destroy()\n    res.result = true\n  }\n\n  function _emitSubscriptionResult(filterIdHex, value) {\n    events.emit('notification', {\n      jsonrpc: '2.0',\n      method: 'eth_subscription',\n      params: {\n        subscription: filterIdHex,\n        result: value,\n      },\n    })\n  }\n\n  function destroy () {\n    events.removeAllListeners()\n    for (const id in subscriptions) {\n      subscriptions[id].destroy()\n      delete subscriptions[id]\n    }\n    isDestroyed = true\n  }\n}\n\nfunction normalizeBlock(block) {\n  return {\n    hash: block.hash,\n    parentHash: block.parentHash,\n    sha3Uncles: block.sha3Uncles,\n    miner: block.miner,\n    stateRoot: block.stateRoot,\n    transactionsRoot: block.transactionsRoot,\n    receiptsRoot: block.receiptsRoot,\n    logsBloom: block.logsBloom,\n    difficulty: block.difficulty,\n    number: block.number,\n    gasLimit: block.gasLimit,\n    gasUsed: block.gasUsed,\n    nonce: block.nonce,\n    mixHash: block.mixHash,\n    timestamp: block.timestamp,\n    extraData: block.extraData,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}