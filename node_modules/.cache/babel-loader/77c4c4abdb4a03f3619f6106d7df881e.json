{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\nvar secp256k1 = require('./secp256k1v3-adapter');\nvar BN = require(\"bn.js\");\nvar bytes_1 = require(\"./bytes\");\nvar hash_1 = require(\"./hash\");\n/**\n * Returns the ECDSA signature of a message hash.\n */\nexports.ecsign = function (msgHash, privateKey, chainId) {\n  var sig = secp256k1.sign(msgHash, privateKey);\n  var recovery = sig.recovery;\n  var ret = {\n    r: sig.signature.slice(0, 32),\n    s: sig.signature.slice(32, 64),\n    v: chainId ? recovery + (chainId * 2 + 35) : recovery + 27\n  };\n  return ret;\n};\n/**\n * ECDSA public key recovery from signature.\n * @returns Recovered public key\n */\nexports.ecrecover = function (msgHash, v, r, s, chainId) {\n  var signature = Buffer.concat([bytes_1.setLength(r, 32), bytes_1.setLength(s, 32)], 64);\n  var recovery = calculateSigRecovery(v, chainId);\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n  var senderPubKey = secp256k1.recover(msgHash, signature, recovery);\n  return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);\n};\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * @returns Signature\n */\nexports.toRpcSig = function (v, r, s, chainId) {\n  var recovery = calculateSigRecovery(v, chainId);\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n  return bytes_1.bufferToHex(Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32), bytes_1.toBuffer(v)]));\n};\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n */\nexports.fromRpcSig = function (sig) {\n  var buf = bytes_1.toBuffer(sig);\n  // NOTE: with potential introduction of chainId this might need to be updated\n  if (buf.length !== 65) {\n    throw new Error('Invalid signature length');\n  }\n  var v = buf[64];\n  // support both versions of `eth_sign` responses\n  if (v < 27) {\n    v += 27;\n  }\n  return {\n    v: v,\n    r: buf.slice(0, 32),\n    s: buf.slice(32, 64)\n  };\n};\n/**\n * Validate a ECDSA signature.\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\nexports.isValidSignature = function (v, r, s, homesteadOrLater, chainId) {\n  if (homesteadOrLater === void 0) {\n    homesteadOrLater = true;\n  }\n  var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n  var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);\n  if (r.length !== 32 || s.length !== 32) {\n    return false;\n  }\n  if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n    return false;\n  }\n  var rBN = new BN(r);\n  var sBN = new BN(s);\n  if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {\n    return false;\n  }\n  if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {\n    return false;\n  }\n  return true;\n};\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\nexports.hashPersonalMessage = function (message) {\n  var prefix = Buffer.from(\"\\u0019Ethereum Signed Message:\\n\" + message.length.toString(), 'utf-8');\n  return hash_1.keccak(Buffer.concat([prefix, message]));\n};\nfunction calculateSigRecovery(v, chainId) {\n  return chainId ? v - (2 * chainId + 35) : v - 27;\n}\nfunction isValidSigRecovery(recovery) {\n  return recovery === 0 || recovery === 1;\n}","map":{"version":3,"names":["secp256k1","require","BN","bytes_1","hash_1","exports","ecsign","msgHash","privateKey","chainId","sig","sign","recovery","ret","r","signature","slice","s","v","ecrecover","Buffer","concat","setLength","calculateSigRecovery","isValidSigRecovery","Error","senderPubKey","recover","publicKeyConvert","toRpcSig","bufferToHex","setLengthLeft","toBuffer","fromRpcSig","buf","length","isValidSignature","homesteadOrLater","SECP256K1_N_DIV_2","SECP256K1_N","rBN","sBN","isZero","gt","cmp","hashPersonalMessage","message","prefix","from","toString","keccak"],"sources":["../src/signature.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}