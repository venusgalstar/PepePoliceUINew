{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rlphash = exports.ripemd160 = exports.sha256 = exports.keccak256 = exports.keccak = void 0;\nvar _a = require('ethereum-cryptography/keccak'),\n  keccak224 = _a.keccak224,\n  keccak384 = _a.keccak384,\n  k256 = _a.keccak256,\n  keccak512 = _a.keccak512;\nvar createHash = require('create-hash');\nvar ethjsUtil = require('ethjs-util');\nvar rlp = require(\"rlp\");\nvar bytes_1 = require(\"./bytes\");\n/**\n * Creates Keccak hash of the input\n * @param a The input data (Buffer|Array|String|Number) If the string is a 0x-prefixed hex value\n * it's interpreted as hexadecimal, otherwise as utf8.\n * @param bits The Keccak width\n */\nexports.keccak = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n  if (typeof a === 'string' && !ethjsUtil.isHexString(a)) {\n    a = Buffer.from(a, 'utf8');\n  } else {\n    a = bytes_1.toBuffer(a);\n  }\n  if (!bits) bits = 256;\n  switch (bits) {\n    case 224:\n      {\n        return keccak224(a);\n      }\n    case 256:\n      {\n        return k256(a);\n      }\n    case 384:\n      {\n        return keccak384(a);\n      }\n    case 512:\n      {\n        return keccak512(a);\n      }\n    default:\n      {\n        throw new Error(\"Invald algorithm: keccak\" + bits);\n      }\n  }\n};\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\n * @param a The input data (Buffer|Array|String|Number)\n */\nexports.keccak256 = function (a) {\n  return exports.keccak(a);\n};\n/**\n * Creates SHA256 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n */\nexports.sha256 = function (a) {\n  a = bytes_1.toBuffer(a);\n  return createHash('sha256').update(a).digest();\n};\n/**\n * Creates RIPEMD160 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n * @param padded Whether it should be padded to 256 bits or not\n */\nexports.ripemd160 = function (a, padded) {\n  a = bytes_1.toBuffer(a);\n  var hash = createHash('rmd160').update(a).digest();\n  if (padded === true) {\n    return bytes_1.setLength(hash, 32);\n  } else {\n    return hash;\n  }\n};\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input.\n * @param a The input data\n */\nexports.rlphash = function (a) {\n  return exports.keccak(rlp.encode(a));\n};","map":{"version":3,"names":["_a","require","keccak224","keccak384","k256","keccak256","keccak512","createHash","ethjsUtil","rlp","bytes_1","exports","keccak","a","bits","isHexString","Buffer","from","toBuffer","Error","sha256","update","digest","ripemd160","padded","hash","setLength","rlphash","encode"],"sources":["../src/hash.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAM,IAAAA,EAAA,GAAuDC,OAAO,CAAC,8BAA8B,CAAC;EAA5FC,SAAS,GAAAF,EAAA,CAAAE,SAAA;EAAEC,SAAS,GAAAH,EAAA,CAAAG,SAAA;EAAaC,IAAI,GAAAJ,EAAA,CAAAK,SAAA;EAAEC,SAAS,GAAAN,EAAA,CAAAM,SAA4C;AACpG,IAAMC,UAAU,GAAGN,OAAO,CAAC,aAAa,CAAC;AACzC,IAAMO,SAAS,GAAGP,OAAO,CAAC,YAAY,CAAC;AACvC,IAAAQ,GAAA,GAAAR,OAAA;AACA,IAAAS,OAAA,GAAAT,OAAA;AAEA;;;;;;AAMaU,OAAA,CAAAC,MAAM,GAAG,UAASC,CAAM,EAAEC,IAAkB;EAAlB,IAAAA,IAAA;IAAAA,IAAA,MAAkB;EAAA;EACvD,IAAI,OAAOD,CAAC,KAAK,QAAQ,IAAI,CAACL,SAAS,CAACO,WAAW,CAACF,CAAC,CAAC,EAAE;IACtDA,CAAC,GAAGG,MAAM,CAACC,IAAI,CAACJ,CAAC,EAAE,MAAM,CAAC;GAC3B,MAAM;IACLA,CAAC,GAAGH,OAAA,CAAAQ,QAAQ,CAACL,CAAC,CAAC;;EAGjB,IAAI,CAACC,IAAI,EAAEA,IAAI,GAAG,GAAG;EAErB,QAAQA,IAAI;IACV,KAAK,GAAG;MAAE;QACR,OAAOZ,SAAS,CAACW,CAAC,CAAC;;IAErB,KAAK,GAAG;MAAE;QACR,OAAOT,IAAI,CAACS,CAAC,CAAC;;IAEhB,KAAK,GAAG;MAAE;QACR,OAAOV,SAAS,CAACU,CAAC,CAAC;;IAErB,KAAK,GAAG;MAAE;QACR,OAAOP,SAAS,CAACO,CAAC,CAAC;;IAErB;MAAS;QACP,MAAM,IAAIM,KAAK,CAAC,6BAA2BL,IAAM,CAAC;;;AAGxD,CAAC;AAED;;;;AAIaH,OAAA,CAAAN,SAAS,GAAG,UAASQ,CAAM;EACtC,OAAOF,OAAA,CAAAC,MAAM,CAACC,CAAC,CAAC;AAClB,CAAC;AAED;;;;AAIaF,OAAA,CAAAS,MAAM,GAAG,UAASP,CAAM;EACnCA,CAAC,GAAGH,OAAA,CAAAQ,QAAQ,CAACL,CAAC,CAAC;EACf,OAAON,UAAU,CAAC,QAAQ,CAAC,CACxBc,MAAM,CAACR,CAAC,CAAC,CACTS,MAAM,EAAE;AACb,CAAC;AAED;;;;;AAKaX,OAAA,CAAAY,SAAS,GAAG,UAASV,CAAM,EAAEW,MAAe;EACvDX,CAAC,GAAGH,OAAA,CAAAQ,QAAQ,CAACL,CAAC,CAAC;EACf,IAAMY,IAAI,GAAGlB,UAAU,CAAC,QAAQ,CAAC,CAC9Bc,MAAM,CAACR,CAAC,CAAC,CACTS,MAAM,EAAE;EACX,IAAIE,MAAM,KAAK,IAAI,EAAE;IACnB,OAAOd,OAAA,CAAAgB,SAAS,CAACD,IAAI,EAAE,EAAE,CAAC;GAC3B,MAAM;IACL,OAAOA,IAAI;;AAEf,CAAC;AAED;;;;AAIad,OAAA,CAAAgB,OAAO,GAAG,UAASd,CAAY;EAC1C,OAAOF,OAAA,CAAAC,MAAM,CAACH,GAAG,CAACmB,MAAM,CAACf,CAAC,CAAC,CAAC;AAC9B,CAAC"},"metadata":{},"sourceType":"script"}